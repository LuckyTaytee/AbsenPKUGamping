{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.syncUniqueId = syncUniqueId;\nexports.getMacAddress = getMacAddress;\nexports.getMacAddressSync = getMacAddressSync;\nexports.getReadableVersion = getReadableVersion;\nexports.hasNotch = hasNotch;\nexports.getTotalDiskCapacityOld = getTotalDiskCapacityOld;\nexports.getTotalDiskCapacityOldSync = getTotalDiskCapacityOldSync;\nexports.getFreeDiskStorageOld = getFreeDiskStorageOld;\nexports.getFreeDiskStorageOldSync = getFreeDiskStorageOldSync;\nexports.isLandscape = isLandscape;\nexports.isLandscapeSync = isLandscapeSync;\nexports.hasSystemFeature = hasSystemFeature;\nexports.hasSystemFeatureSync = hasSystemFeatureSync;\nexports.getDeviceToken = getDeviceToken;\nexports.useBatteryLevel = useBatteryLevel;\nexports.useBatteryLevelIsLow = useBatteryLevelIsLow;\nexports.usePowerState = usePowerState;\nexports.useIsHeadphonesConnected = useIsHeadphonesConnected;\nexports.useFirstInstallTime = useFirstInstallTime;\nexports.useDeviceName = useDeviceName;\nexports.useHasSystemFeature = useHasSystemFeature;\nexports.useIsEmulator = useIsEmulator;\nexports.useManufacturer = useManufacturer;\nexports.getDeviceType = exports.isAirplaneModeSync = exports.isAirplaneMode = exports.isBatteryChargingSync = exports.isBatteryCharging = exports.getPowerStateSync = exports.getPowerState = exports.getBatteryLevelSync = exports.getBatteryLevel = exports.getFreeDiskStorageSync = exports.getFreeDiskStorage = exports.getTotalDiskCapacitySync = exports.getTotalDiskCapacity = exports.getMaxMemorySync = exports.getMaxMemory = exports.getTotalMemorySync = exports.getTotalMemory = exports.getCarrierSync = exports.getCarrier = exports.getPhoneNumberSync = exports.getPhoneNumber = exports.getLastUpdateTimeSync = exports.getLastUpdateTime = exports.getInstallReferrerSync = exports.getInstallReferrer = exports.getFirstInstallTimeSync = exports.getFirstInstallTime = exports.hasHmsSync = exports.hasHms = exports.hasGmsSync = exports.hasGms = exports.isPinOrFingerprintSetSync = exports.isPinOrFingerprintSet = exports.isTablet = exports.isEmulatorSync = exports.isEmulator = exports.getIncrementalSync = exports.getIncremental = exports.getCodenameSync = exports.getCodename = exports.getSecurityPatchSync = exports.getSecurityPatch = exports.getPreviewSdkIntSync = exports.getPreviewSdkInt = exports.getBaseOsSync = exports.getBaseOs = exports.getTypeSync = exports.getType = exports.getTagsSync = exports.getTags = exports.getProductSync = exports.getProduct = exports.getHostSync = exports.getHost = exports.getHardwareSync = exports.getHardware = exports.getFingerprintSync = exports.getFingerprint = exports.getDisplaySync = exports.getDisplay = exports.getDeviceSync = exports.getDevice = exports.getBootloaderSync = exports.getBootloader = exports.getFontScaleSync = exports.getFontScale = exports.getUserAgentSync = exports.getUserAgent = exports.getUsedMemorySync = exports.getUsedMemory = exports.getDeviceNameSync = exports.getDeviceName = exports.getVersion = exports.getBuildNumber = exports.getApplicationName = exports.getInstallerPackageNameSync = exports.getInstallerPackageName = exports.getBundleId = exports.getApiLevelSync = exports.getApiLevel = exports.getBuildIdSync = exports.getBuildId = exports.getSystemVersion = exports.getSystemName = exports.getBrand = exports.getModel = exports.getManufacturerSync = exports.getManufacturer = exports.getDeviceId = exports.isCameraPresentSync = exports.isCameraPresent = exports.getIpAddressSync = exports.getIpAddress = exports.getAndroidIdSync = exports.getAndroidId = exports.getSerialNumberSync = exports.getSerialNumber = exports.getInstanceIdSync = exports.getInstanceId = exports.getUniqueId = void 0;\nexports.default = exports.getAvailableLocationProvidersSync = exports.getAvailableLocationProviders = exports.isHeadphonesConnectedSync = exports.isHeadphonesConnected = exports.isLocationEnabledSync = exports.isLocationEnabled = exports.getSystemAvailableFeaturesSync = exports.getSystemAvailableFeatures = exports.supported64BitAbisSync = exports.supported64BitAbis = exports.supported32BitAbisSync = exports.supported32BitAbis = exports.supportedAbisSync = exports.supportedAbis = exports.getDeviceTypeSync = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _asyncHookWrappers = require(\"./internal/asyncHookWrappers\");\n\nvar _devicesWithNotch = _interopRequireDefault(require(\"./internal/devicesWithNotch\"));\n\nvar _nativeInterface = _interopRequireDefault(require(\"./internal/nativeInterface\"));\n\nvar _supportedPlatformInfo = require(\"./internal/supported-platform-info\");\n\nvar getUniqueId = function getUniqueId() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    defaultValue: 'unknown',\n    memoKey: 'uniqueId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: function getter() {\n      return _nativeInterface.default.uniqueId;\n    }\n  });\n};\n\nexports.getUniqueId = getUniqueId;\nvar uniqueId;\n\nfunction syncUniqueId() {\n  return _regenerator.default.async(function syncUniqueId$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(_reactNative.Platform.OS === 'ios')) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 3;\n          return _regenerator.default.awrap(_nativeInterface.default.syncUniqueId());\n\n        case 3:\n          uniqueId = _context.sent;\n          _context.next = 7;\n          break;\n\n        case 6:\n          uniqueId = getUniqueId();\n\n        case 7:\n          return _context.abrupt(\"return\", uniqueId);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar _getSupportedPlatform = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'instanceId',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getInstanceId();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getInstanceIdSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform2 = (0, _slicedToArray2.default)(_getSupportedPlatform, 2),\n    getInstanceId = _getSupportedPlatform2[0],\n    getInstanceIdSync = _getSupportedPlatform2[1];\n\nexports.getInstanceIdSync = getInstanceIdSync;\nexports.getInstanceId = getInstanceId;\n\nvar _getSupportedPlatform3 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'serialNumber',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getSerialNumber();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getSerialNumberSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform4 = (0, _slicedToArray2.default)(_getSupportedPlatform3, 2),\n    getSerialNumber = _getSupportedPlatform4[0],\n    getSerialNumberSync = _getSupportedPlatform4[1];\n\nexports.getSerialNumberSync = getSerialNumberSync;\nexports.getSerialNumber = getSerialNumber;\n\nvar _getSupportedPlatform5 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'androidId',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getAndroidId();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getAndroidIdSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform6 = (0, _slicedToArray2.default)(_getSupportedPlatform5, 2),\n    getAndroidId = _getSupportedPlatform6[0],\n    getAndroidIdSync = _getSupportedPlatform6[1];\n\nexports.getAndroidIdSync = getAndroidIdSync;\nexports.getAndroidId = getAndroidId;\n\nvar _getSupportedPlatform7 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.getIpAddress();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getIpAddressSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform8 = (0, _slicedToArray2.default)(_getSupportedPlatform7, 2),\n    getIpAddress = _getSupportedPlatform8[0],\n    getIpAddressSync = _getSupportedPlatform8[1];\n\nexports.getIpAddressSync = getIpAddressSync;\nexports.getIpAddress = getIpAddress;\n\nvar _getSupportedPlatform9 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.isCameraPresent();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.isCameraPresentSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform10 = (0, _slicedToArray2.default)(_getSupportedPlatform9, 2),\n    isCameraPresent = _getSupportedPlatform10[0],\n    isCameraPresentSync = _getSupportedPlatform10[1];\n\nexports.isCameraPresentSync = isCameraPresentSync;\nexports.isCameraPresent = isCameraPresent;\n\nfunction getMacAddress() {\n  return _regenerator.default.async(function getMacAddress$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(_reactNative.Platform.OS === 'android')) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", _nativeInterface.default.getMacAddress());\n\n        case 4:\n          if (!(_reactNative.Platform.OS === 'ios')) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", '02:00:00:00:00:00');\n\n        case 6:\n          return _context2.abrupt(\"return\", 'unknown');\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getMacAddressSync() {\n  if (_reactNative.Platform.OS === 'android') {\n    return _nativeInterface.default.getMacAddressSync();\n  } else if (_reactNative.Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n\n  return 'unknown';\n}\n\nvar getDeviceId = function getDeviceId() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    defaultValue: 'unknown',\n    memoKey: 'deviceId',\n    getter: function getter() {\n      return _nativeInterface.default.deviceId;\n    },\n    supportedPlatforms: ['android', 'ios', 'windows']\n  });\n};\n\nexports.getDeviceId = getDeviceId;\n\nvar _getSupportedPlatform11 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'manufacturer',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return _reactNative.Platform.OS == 'ios' ? Promise.resolve('Apple') : _nativeInterface.default.getSystemManufacturer();\n  },\n  syncGetter: function syncGetter() {\n    return _reactNative.Platform.OS == 'ios' ? 'Apple' : _nativeInterface.default.getSystemManufacturerSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform12 = (0, _slicedToArray2.default)(_getSupportedPlatform11, 2),\n    getManufacturer = _getSupportedPlatform12[0],\n    getManufacturerSync = _getSupportedPlatform12[1];\n\nexports.getManufacturerSync = getManufacturerSync;\nexports.getManufacturer = getManufacturer;\n\nvar getModel = function getModel() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'model',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    getter: function getter() {\n      return _nativeInterface.default.model;\n    }\n  });\n};\n\nexports.getModel = getModel;\n\nvar getBrand = function getBrand() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'brand',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return _nativeInterface.default.brand;\n    }\n  });\n};\n\nexports.getBrand = getBrand;\n\nvar getSystemName = function getSystemName() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    memoKey: 'systemName',\n    getter: function getter() {\n      return _reactNative.Platform.select({\n        ios: _nativeInterface.default.systemName,\n        android: 'Android',\n        windows: 'Windows',\n        default: 'unknown'\n      });\n    }\n  });\n};\n\nexports.getSystemName = getSystemName;\n\nvar getSystemVersion = function getSystemVersion() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return _nativeInterface.default.systemVersion;\n    },\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'systemVersion'\n  });\n};\n\nexports.getSystemVersion = getSystemVersion;\n\nvar _getSupportedPlatform13 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'buildId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.getBuildId();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getBuildIdSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform14 = (0, _slicedToArray2.default)(_getSupportedPlatform13, 2),\n    getBuildId = _getSupportedPlatform14[0],\n    getBuildIdSync = _getSupportedPlatform14[1];\n\nexports.getBuildIdSync = getBuildIdSync;\nexports.getBuildId = getBuildId;\n\nvar _getSupportedPlatform15 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'apiLevel',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getApiLevel();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getApiLevelSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform16 = (0, _slicedToArray2.default)(_getSupportedPlatform15, 2),\n    getApiLevel = _getSupportedPlatform16[0],\n    getApiLevelSync = _getSupportedPlatform16[1];\n\nexports.getApiLevelSync = getApiLevelSync;\nexports.getApiLevel = getApiLevel;\n\nvar getBundleId = function getBundleId() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'bundleId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return _nativeInterface.default.bundleId;\n    }\n  });\n};\n\nexports.getBundleId = getBundleId;\n\nvar _getSupportedPlatform17 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'installerPackageName',\n  supportedPlatforms: ['android', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.getInstallerPackageName();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getInstallerPackageNameSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform18 = (0, _slicedToArray2.default)(_getSupportedPlatform17, 2),\n    getInstallerPackageName = _getSupportedPlatform18[0],\n    getInstallerPackageNameSync = _getSupportedPlatform18[1];\n\nexports.getInstallerPackageNameSync = getInstallerPackageNameSync;\nexports.getInstallerPackageName = getInstallerPackageName;\n\nvar getApplicationName = function getApplicationName() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'appName',\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return _nativeInterface.default.appName;\n    },\n    supportedPlatforms: ['android', 'ios', 'windows']\n  });\n};\n\nexports.getApplicationName = getApplicationName;\n\nvar getBuildNumber = function getBuildNumber() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'buildNumber',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: function getter() {\n      return _nativeInterface.default.buildNumber;\n    },\n    defaultValue: 'unknown'\n  });\n};\n\nexports.getBuildNumber = getBuildNumber;\n\nvar getVersion = function getVersion() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'version',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: function getter() {\n      return _nativeInterface.default.appVersion;\n    }\n  });\n};\n\nexports.getVersion = getVersion;\n\nfunction getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\n\nvar _getSupportedPlatform19 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'deviceName',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.getDeviceName();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getDeviceNameSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform20 = (0, _slicedToArray2.default)(_getSupportedPlatform19, 2),\n    getDeviceName = _getSupportedPlatform20[0],\n    getDeviceNameSync = _getSupportedPlatform20[1];\n\nexports.getDeviceNameSync = getDeviceNameSync;\nexports.getDeviceName = getDeviceName;\n\nvar _getSupportedPlatform21 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.getUsedMemory();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getUsedMemorySync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform22 = (0, _slicedToArray2.default)(_getSupportedPlatform21, 2),\n    getUsedMemory = _getSupportedPlatform22[0],\n    getUsedMemorySync = _getSupportedPlatform22[1];\n\nexports.getUsedMemorySync = getUsedMemorySync;\nexports.getUsedMemory = getUsedMemory;\n\nvar getUserAgent = function getUserAgent() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoAsync)({\n    memoKey: 'userAgent',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'web'],\n    getter: function getter() {\n      return _nativeInterface.default.getUserAgent();\n    }\n  });\n};\n\nexports.getUserAgent = getUserAgent;\n\nvar getUserAgentSync = function getUserAgentSync() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'userAgent',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'web'],\n    getter: function getter() {\n      return _nativeInterface.default.getUserAgentSync();\n    }\n  });\n};\n\nexports.getUserAgentSync = getUserAgentSync;\n\nvar _getSupportedPlatform23 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.getFontScale();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getFontScaleSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform24 = (0, _slicedToArray2.default)(_getSupportedPlatform23, 2),\n    getFontScale = _getSupportedPlatform24[0],\n    getFontScaleSync = _getSupportedPlatform24[1];\n\nexports.getFontScaleSync = getFontScaleSync;\nexports.getFontScale = getFontScale;\n\nvar _getSupportedPlatform25 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'bootloader',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getBootloader();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getBootloaderSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform26 = (0, _slicedToArray2.default)(_getSupportedPlatform25, 2),\n    getBootloader = _getSupportedPlatform26[0],\n    getBootloaderSync = _getSupportedPlatform26[1];\n\nexports.getBootloaderSync = getBootloaderSync;\nexports.getBootloader = getBootloader;\n\nvar _getSupportedPlatform27 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  getter: function getter() {\n    return _nativeInterface.default.getDevice();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getDeviceSync();\n  },\n  defaultValue: 'unknown',\n  memoKey: 'device',\n  supportedPlatforms: ['android']\n}),\n    _getSupportedPlatform28 = (0, _slicedToArray2.default)(_getSupportedPlatform27, 2),\n    getDevice = _getSupportedPlatform28[0],\n    getDeviceSync = _getSupportedPlatform28[1];\n\nexports.getDeviceSync = getDeviceSync;\nexports.getDevice = getDevice;\n\nvar _getSupportedPlatform29 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'display',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getDisplay();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getDisplaySync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform30 = (0, _slicedToArray2.default)(_getSupportedPlatform29, 2),\n    getDisplay = _getSupportedPlatform30[0],\n    getDisplaySync = _getSupportedPlatform30[1];\n\nexports.getDisplaySync = getDisplaySync;\nexports.getDisplay = getDisplay;\n\nvar _getSupportedPlatform31 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'fingerprint',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getFingerprint();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getFingerprintSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform32 = (0, _slicedToArray2.default)(_getSupportedPlatform31, 2),\n    getFingerprint = _getSupportedPlatform32[0],\n    getFingerprintSync = _getSupportedPlatform32[1];\n\nexports.getFingerprintSync = getFingerprintSync;\nexports.getFingerprint = getFingerprint;\n\nvar _getSupportedPlatform33 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'hardware',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getHardware();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getHardwareSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform34 = (0, _slicedToArray2.default)(_getSupportedPlatform33, 2),\n    getHardware = _getSupportedPlatform34[0],\n    getHardwareSync = _getSupportedPlatform34[1];\n\nexports.getHardwareSync = getHardwareSync;\nexports.getHardware = getHardware;\n\nvar _getSupportedPlatform35 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'host',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getHost();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getHostSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform36 = (0, _slicedToArray2.default)(_getSupportedPlatform35, 2),\n    getHost = _getSupportedPlatform36[0],\n    getHostSync = _getSupportedPlatform36[1];\n\nexports.getHostSync = getHostSync;\nexports.getHost = getHost;\n\nvar _getSupportedPlatform37 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'product',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getProduct();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getProductSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform38 = (0, _slicedToArray2.default)(_getSupportedPlatform37, 2),\n    getProduct = _getSupportedPlatform38[0],\n    getProductSync = _getSupportedPlatform38[1];\n\nexports.getProductSync = getProductSync;\nexports.getProduct = getProduct;\n\nvar _getSupportedPlatform39 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'tags',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getTags();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getTagsSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform40 = (0, _slicedToArray2.default)(_getSupportedPlatform39, 2),\n    getTags = _getSupportedPlatform40[0],\n    getTagsSync = _getSupportedPlatform40[1];\n\nexports.getTagsSync = getTagsSync;\nexports.getTags = getTags;\n\nvar _getSupportedPlatform41 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'type',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getType();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getTypeSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform42 = (0, _slicedToArray2.default)(_getSupportedPlatform41, 2),\n    getType = _getSupportedPlatform42[0],\n    getTypeSync = _getSupportedPlatform42[1];\n\nexports.getTypeSync = getTypeSync;\nexports.getType = getType;\n\nvar _getSupportedPlatform43 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'baseOs',\n  supportedPlatforms: ['android', 'web', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.getBaseOs();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getBaseOsSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform44 = (0, _slicedToArray2.default)(_getSupportedPlatform43, 2),\n    getBaseOs = _getSupportedPlatform44[0],\n    getBaseOsSync = _getSupportedPlatform44[1];\n\nexports.getBaseOsSync = getBaseOsSync;\nexports.getBaseOs = getBaseOs;\n\nvar _getSupportedPlatform45 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'previewSdkInt',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getPreviewSdkInt();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getPreviewSdkIntSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform46 = (0, _slicedToArray2.default)(_getSupportedPlatform45, 2),\n    getPreviewSdkInt = _getSupportedPlatform46[0],\n    getPreviewSdkIntSync = _getSupportedPlatform46[1];\n\nexports.getPreviewSdkIntSync = getPreviewSdkIntSync;\nexports.getPreviewSdkInt = getPreviewSdkInt;\n\nvar _getSupportedPlatform47 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'securityPatch',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getSecurityPatch();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getSecurityPatchSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform48 = (0, _slicedToArray2.default)(_getSupportedPlatform47, 2),\n    getSecurityPatch = _getSupportedPlatform48[0],\n    getSecurityPatchSync = _getSupportedPlatform48[1];\n\nexports.getSecurityPatchSync = getSecurityPatchSync;\nexports.getSecurityPatch = getSecurityPatch;\n\nvar _getSupportedPlatform49 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'codeName',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getCodename();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getCodenameSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform50 = (0, _slicedToArray2.default)(_getSupportedPlatform49, 2),\n    getCodename = _getSupportedPlatform50[0],\n    getCodenameSync = _getSupportedPlatform50[1];\n\nexports.getCodenameSync = getCodenameSync;\nexports.getCodename = getCodename;\n\nvar _getSupportedPlatform51 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'incremental',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getIncremental();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getIncrementalSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform52 = (0, _slicedToArray2.default)(_getSupportedPlatform51, 2),\n    getIncremental = _getSupportedPlatform52[0],\n    getIncrementalSync = _getSupportedPlatform52[1];\n\nexports.getIncrementalSync = getIncrementalSync;\nexports.getIncremental = getIncremental;\n\nvar _getSupportedPlatform53 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'emulator',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.isEmulator();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.isEmulatorSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform54 = (0, _slicedToArray2.default)(_getSupportedPlatform53, 2),\n    isEmulator = _getSupportedPlatform54[0],\n    isEmulatorSync = _getSupportedPlatform54[1];\n\nexports.isEmulatorSync = isEmulatorSync;\nexports.isEmulator = isEmulator;\n\nvar isTablet = function isTablet() {\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    defaultValue: false,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'tablet',\n    getter: function getter() {\n      return _nativeInterface.default.isTablet;\n    }\n  });\n};\n\nexports.isTablet = isTablet;\n\nvar _getSupportedPlatform55 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.isPinOrFingerprintSet();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.isPinOrFingerprintSetSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform56 = (0, _slicedToArray2.default)(_getSupportedPlatform55, 2),\n    isPinOrFingerprintSet = _getSupportedPlatform56[0],\n    isPinOrFingerprintSetSync = _getSupportedPlatform56[1];\n\nexports.isPinOrFingerprintSetSync = isPinOrFingerprintSetSync;\nexports.isPinOrFingerprintSet = isPinOrFingerprintSet;\nvar notch;\n\nfunction hasNotch() {\n  if (notch === undefined) {\n    var _brand = getBrand();\n\n    var _model = getModel();\n\n    notch = _devicesWithNotch.default.findIndex(function (item) {\n      return item.brand.toLowerCase() === _brand.toLowerCase() && item.model.toLowerCase() === _model.toLowerCase();\n    }) !== -1;\n  }\n\n  return notch;\n}\n\nvar _getSupportedPlatform57 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.hasGms();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.hasGmsSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform58 = (0, _slicedToArray2.default)(_getSupportedPlatform57, 2),\n    hasGms = _getSupportedPlatform58[0],\n    hasGmsSync = _getSupportedPlatform58[1];\n\nexports.hasGmsSync = hasGmsSync;\nexports.hasGms = hasGms;\n\nvar _getSupportedPlatform59 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.hasHms();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.hasHmsSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform60 = (0, _slicedToArray2.default)(_getSupportedPlatform59, 2),\n    hasHms = _getSupportedPlatform60[0],\n    hasHmsSync = _getSupportedPlatform60[1];\n\nexports.hasHmsSync = hasHmsSync;\nexports.hasHms = hasHms;\n\nvar _getSupportedPlatform61 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'firstInstallTime',\n  supportedPlatforms: ['android', 'windows'],\n  getter: function getter() {\n    return _nativeInterface.default.getFirstInstallTime();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getFirstInstallTimeSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform62 = (0, _slicedToArray2.default)(_getSupportedPlatform61, 2),\n    getFirstInstallTime = _getSupportedPlatform62[0],\n    getFirstInstallTimeSync = _getSupportedPlatform62[1];\n\nexports.getFirstInstallTimeSync = getFirstInstallTimeSync;\nexports.getFirstInstallTime = getFirstInstallTime;\n\nvar _getSupportedPlatform63 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'installReferrer',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.getInstallReferrer();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getInstallReferrerSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform64 = (0, _slicedToArray2.default)(_getSupportedPlatform63, 2),\n    getInstallReferrer = _getSupportedPlatform64[0],\n    getInstallReferrerSync = _getSupportedPlatform64[1];\n\nexports.getInstallReferrerSync = getInstallReferrerSync;\nexports.getInstallReferrer = getInstallReferrer;\n\nvar _getSupportedPlatform65 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'lastUpdateTime',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getLastUpdateTime();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getLastUpdateTimeSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform66 = (0, _slicedToArray2.default)(_getSupportedPlatform65, 2),\n    getLastUpdateTime = _getSupportedPlatform66[0],\n    getLastUpdateTimeSync = _getSupportedPlatform66[1];\n\nexports.getLastUpdateTimeSync = getLastUpdateTimeSync;\nexports.getLastUpdateTime = getLastUpdateTime;\n\nvar _getSupportedPlatform67 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getPhoneNumber();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getPhoneNumberSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform68 = (0, _slicedToArray2.default)(_getSupportedPlatform67, 2),\n    getPhoneNumber = _getSupportedPlatform68[0],\n    getPhoneNumberSync = _getSupportedPlatform68[1];\n\nexports.getPhoneNumberSync = getPhoneNumberSync;\nexports.getPhoneNumber = getPhoneNumber;\n\nvar _getSupportedPlatform69 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios'],\n  getter: function getter() {\n    return _nativeInterface.default.getCarrier();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getCarrierSync();\n  },\n  defaultValue: 'unknown'\n}),\n    _getSupportedPlatform70 = (0, _slicedToArray2.default)(_getSupportedPlatform69, 2),\n    getCarrier = _getSupportedPlatform70[0],\n    getCarrierSync = _getSupportedPlatform70[1];\n\nexports.getCarrierSync = getCarrierSync;\nexports.getCarrier = getCarrier;\n\nvar _getSupportedPlatform71 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'totalMemory',\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.getTotalMemory();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getTotalMemorySync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform72 = (0, _slicedToArray2.default)(_getSupportedPlatform71, 2),\n    getTotalMemory = _getSupportedPlatform72[0],\n    getTotalMemorySync = _getSupportedPlatform72[1];\n\nexports.getTotalMemorySync = getTotalMemorySync;\nexports.getTotalMemory = getTotalMemory;\n\nvar _getSupportedPlatform73 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: 'maxMemory',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.getMaxMemory();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getMaxMemorySync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform74 = (0, _slicedToArray2.default)(_getSupportedPlatform73, 2),\n    getMaxMemory = _getSupportedPlatform74[0],\n    getMaxMemorySync = _getSupportedPlatform74[1];\n\nexports.getMaxMemorySync = getMaxMemorySync;\nexports.getMaxMemory = getMaxMemory;\n\nvar _getSupportedPlatform75 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.getTotalDiskCapacity();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getTotalDiskCapacitySync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform76 = (0, _slicedToArray2.default)(_getSupportedPlatform75, 2),\n    getTotalDiskCapacity = _getSupportedPlatform76[0],\n    getTotalDiskCapacitySync = _getSupportedPlatform76[1];\n\nexports.getTotalDiskCapacitySync = getTotalDiskCapacitySync;\nexports.getTotalDiskCapacity = getTotalDiskCapacity;\n\nfunction getTotalDiskCapacityOld() {\n  return _regenerator.default.async(function getTotalDiskCapacityOld$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(_reactNative.Platform.OS === 'android')) {\n            _context3.next = 2;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", _nativeInterface.default.getTotalDiskCapacityOld());\n\n        case 2:\n          if (!(_reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'windows' || _reactNative.Platform.OS === 'web')) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", getTotalDiskCapacity());\n\n        case 4:\n          return _context3.abrupt(\"return\", -1);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getTotalDiskCapacityOldSync() {\n  if (_reactNative.Platform.OS === 'android') {\n    return _nativeInterface.default.getTotalDiskCapacityOldSync();\n  }\n\n  if (_reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'windows' || _reactNative.Platform.OS === 'web') {\n    return getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\n\nvar _getSupportedPlatform77 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.getFreeDiskStorage();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getFreeDiskStorageSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform78 = (0, _slicedToArray2.default)(_getSupportedPlatform77, 2),\n    getFreeDiskStorage = _getSupportedPlatform78[0],\n    getFreeDiskStorageSync = _getSupportedPlatform78[1];\n\nexports.getFreeDiskStorageSync = getFreeDiskStorageSync;\nexports.getFreeDiskStorage = getFreeDiskStorage;\n\nfunction getFreeDiskStorageOld() {\n  return _regenerator.default.async(function getFreeDiskStorageOld$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(_reactNative.Platform.OS === 'android')) {\n            _context4.next = 2;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", _nativeInterface.default.getFreeDiskStorageOld());\n\n        case 2:\n          if (!(_reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'windows' || _reactNative.Platform.OS === 'web')) {\n            _context4.next = 4;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", getFreeDiskStorage());\n\n        case 4:\n          return _context4.abrupt(\"return\", -1);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getFreeDiskStorageOldSync() {\n  if (_reactNative.Platform.OS === 'android') {\n    return _nativeInterface.default.getFreeDiskStorageOldSync();\n  }\n\n  if (_reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'windows' || _reactNative.Platform.OS === 'web') {\n    return getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\n\nvar _getSupportedPlatform79 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.getBatteryLevel();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getBatteryLevelSync();\n  },\n  defaultValue: -1\n}),\n    _getSupportedPlatform80 = (0, _slicedToArray2.default)(_getSupportedPlatform79, 2),\n    getBatteryLevel = _getSupportedPlatform80[0],\n    getBatteryLevelSync = _getSupportedPlatform80[1];\n\nexports.getBatteryLevelSync = getBatteryLevelSync;\nexports.getBatteryLevel = getBatteryLevel;\n\nvar _getSupportedPlatform81 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['ios', 'android', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.getPowerState();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getPowerStateSync();\n  },\n  defaultValue: {}\n}),\n    _getSupportedPlatform82 = (0, _slicedToArray2.default)(_getSupportedPlatform81, 2),\n    getPowerState = _getSupportedPlatform82[0],\n    getPowerStateSync = _getSupportedPlatform82[1];\n\nexports.getPowerStateSync = getPowerStateSync;\nexports.getPowerState = getPowerState;\n\nvar _getSupportedPlatform83 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.isBatteryCharging();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.isBatteryChargingSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform84 = (0, _slicedToArray2.default)(_getSupportedPlatform83, 2),\n    isBatteryCharging = _getSupportedPlatform84[0],\n    isBatteryChargingSync = _getSupportedPlatform84[1];\n\nexports.isBatteryChargingSync = isBatteryChargingSync;\nexports.isBatteryCharging = isBatteryCharging;\n\nfunction isLandscape() {\n  return _regenerator.default.async(function isLandscape$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", Promise.resolve(isLandscapeSync()));\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction isLandscapeSync() {\n  var _Dimensions$get = _reactNative.Dimensions.get('window'),\n      height = _Dimensions$get.height,\n      width = _Dimensions$get.width;\n\n  return width >= height;\n}\n\nvar _getSupportedPlatform85 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.isAirplaneMode();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.isAirplaneModeSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform86 = (0, _slicedToArray2.default)(_getSupportedPlatform85, 2),\n    isAirplaneMode = _getSupportedPlatform86[0],\n    isAirplaneModeSync = _getSupportedPlatform86[1];\n\nexports.isAirplaneModeSync = isAirplaneModeSync;\nexports.isAirplaneMode = isAirplaneMode;\n\nvar getDeviceType = function getDeviceType() {\n  if (_reactNative.Platform.OS === 'windows') return 'Desktop';\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return _nativeInterface.default.deviceType;\n    }\n  });\n};\n\nexports.getDeviceType = getDeviceType;\n\nvar getDeviceTypeSync = function getDeviceTypeSync() {\n  if (_reactNative.Platform.OS === 'windows') return 'Desktop';\n  return (0, _supportedPlatformInfo.getSupportedPlatformInfoSync)({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: function getter() {\n      return _nativeInterface.default.deviceType;\n    }\n  });\n};\n\nexports.getDeviceTypeSync = getDeviceTypeSync;\n\nvar _getSupportedPlatform87 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: '_supportedAbis',\n  supportedPlatforms: ['android', 'ios'],\n  getter: function getter() {\n    return _nativeInterface.default.getSupportedAbis();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getSupportedAbisSync();\n  },\n  defaultValue: []\n}),\n    _getSupportedPlatform88 = (0, _slicedToArray2.default)(_getSupportedPlatform87, 2),\n    supportedAbis = _getSupportedPlatform88[0],\n    supportedAbisSync = _getSupportedPlatform88[1];\n\nexports.supportedAbisSync = supportedAbisSync;\nexports.supportedAbis = supportedAbis;\n\nvar _getSupportedPlatform89 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: '_supported32BitAbis',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getSupported32BitAbis();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getSupported32BitAbisSync();\n  },\n  defaultValue: []\n}),\n    _getSupportedPlatform90 = (0, _slicedToArray2.default)(_getSupportedPlatform89, 2),\n    supported32BitAbis = _getSupportedPlatform90[0],\n    supported32BitAbisSync = _getSupportedPlatform90[1];\n\nexports.supported32BitAbisSync = supported32BitAbisSync;\nexports.supported32BitAbis = supported32BitAbis;\n\nvar _getSupportedPlatform91 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  memoKey: '_supported64BitAbis',\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getSupported64BitAbis();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getSupported64BitAbisSync();\n  },\n  defaultValue: []\n}),\n    _getSupportedPlatform92 = (0, _slicedToArray2.default)(_getSupportedPlatform91, 2),\n    supported64BitAbis = _getSupportedPlatform92[0],\n    supported64BitAbisSync = _getSupportedPlatform92[1];\n\nexports.supported64BitAbisSync = supported64BitAbisSync;\nexports.supported64BitAbis = supported64BitAbis;\n\nfunction hasSystemFeature(feature) {\n  return _regenerator.default.async(function hasSystemFeature$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(_reactNative.Platform.OS === 'android')) {\n            _context6.next = 2;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", _nativeInterface.default.hasSystemFeature(feature));\n\n        case 2:\n          return _context6.abrupt(\"return\", false);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction hasSystemFeatureSync(feature) {\n  if (_reactNative.Platform.OS === 'android') {\n    return _nativeInterface.default.hasSystemFeatureSync(feature);\n  }\n\n  return false;\n}\n\nvar _getSupportedPlatform93 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android'],\n  getter: function getter() {\n    return _nativeInterface.default.getSystemAvailableFeatures();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getSystemAvailableFeaturesSync();\n  },\n  defaultValue: []\n}),\n    _getSupportedPlatform94 = (0, _slicedToArray2.default)(_getSupportedPlatform93, 2),\n    getSystemAvailableFeatures = _getSupportedPlatform94[0],\n    getSystemAvailableFeaturesSync = _getSupportedPlatform94[1];\n\nexports.getSystemAvailableFeaturesSync = getSystemAvailableFeaturesSync;\nexports.getSystemAvailableFeatures = getSystemAvailableFeatures;\n\nvar _getSupportedPlatform95 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: function getter() {\n    return _nativeInterface.default.isLocationEnabled();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.isLocationEnabledSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform96 = (0, _slicedToArray2.default)(_getSupportedPlatform95, 2),\n    isLocationEnabled = _getSupportedPlatform96[0],\n    isLocationEnabledSync = _getSupportedPlatform96[1];\n\nexports.isLocationEnabledSync = isLocationEnabledSync;\nexports.isLocationEnabled = isLocationEnabled;\n\nvar _getSupportedPlatform97 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios'],\n  getter: function getter() {\n    return _nativeInterface.default.isHeadphonesConnected();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.isHeadphonesConnectedSync();\n  },\n  defaultValue: false\n}),\n    _getSupportedPlatform98 = (0, _slicedToArray2.default)(_getSupportedPlatform97, 2),\n    isHeadphonesConnected = _getSupportedPlatform98[0],\n    isHeadphonesConnectedSync = _getSupportedPlatform98[1];\n\nexports.isHeadphonesConnectedSync = isHeadphonesConnectedSync;\nexports.isHeadphonesConnected = isHeadphonesConnected;\n\nvar _getSupportedPlatform99 = (0, _supportedPlatformInfo.getSupportedPlatformInfoFunctions)({\n  supportedPlatforms: ['android', 'ios'],\n  getter: function getter() {\n    return _nativeInterface.default.getAvailableLocationProviders();\n  },\n  syncGetter: function syncGetter() {\n    return _nativeInterface.default.getAvailableLocationProvidersSync();\n  },\n  defaultValue: {}\n}),\n    _getSupportedPlatform100 = (0, _slicedToArray2.default)(_getSupportedPlatform99, 2),\n    getAvailableLocationProviders = _getSupportedPlatform100[0],\n    getAvailableLocationProvidersSync = _getSupportedPlatform100[1];\n\nexports.getAvailableLocationProvidersSync = getAvailableLocationProvidersSync;\nexports.getAvailableLocationProviders = getAvailableLocationProviders;\n\nfunction getDeviceToken() {\n  return _regenerator.default.async(function getDeviceToken$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(_reactNative.Platform.OS === 'ios')) {\n            _context7.next = 2;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", _nativeInterface.default.getDeviceToken());\n\n        case 2:\n          return _context7.abrupt(\"return\", 'unknown');\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar deviceInfoEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.RNDeviceInfo);\n\nfunction useBatteryLevel() {\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      batteryLevel = _useState2[0],\n      setBatteryLevel = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    var setInitialValue = function setInitialValue() {\n      var initialValue;\n      return _regenerator.default.async(function setInitialValue$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regenerator.default.awrap(getBatteryLevel());\n\n            case 2:\n              initialValue = _context8.sent;\n              setBatteryLevel(initialValue);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var onChange = function onChange(level) {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n    var subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelDidChange', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return batteryLevel;\n}\n\nfunction useBatteryLevelIsLow() {\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      batteryLevelIsLow = _useState4[0],\n      setBatteryLevelIsLow = _useState4[1];\n\n  (0, _react.useEffect)(function () {\n    var setInitialValue = function setInitialValue() {\n      var initialValue;\n      return _regenerator.default.async(function setInitialValue$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regenerator.default.awrap(getBatteryLevel());\n\n            case 2:\n              initialValue = _context9.sent;\n              setBatteryLevelIsLow(initialValue);\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var onChange = function onChange(level) {\n      setBatteryLevelIsLow(level);\n    };\n\n    setInitialValue();\n    var subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return batteryLevelIsLow;\n}\n\nfunction usePowerState() {\n  var _useState5 = (0, _react.useState)({}),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      powerState = _useState6[0],\n      setPowerState = _useState6[1];\n\n  (0, _react.useEffect)(function () {\n    var setInitialValue = function setInitialValue() {\n      var initialValue;\n      return _regenerator.default.async(function setInitialValue$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regenerator.default.awrap(getPowerState());\n\n            case 2:\n              initialValue = _context10.sent;\n              setPowerState(initialValue);\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var onChange = function onChange(state) {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n    var subscription = deviceInfoEmitter.addListener('RNDeviceInfo_powerStateDidChange', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return powerState;\n}\n\nfunction useIsHeadphonesConnected() {\n  return (0, _asyncHookWrappers.useOnEvent)('RNDeviceInfo_headphoneConnectionDidChange', isHeadphonesConnected, false);\n}\n\nfunction useFirstInstallTime() {\n  return (0, _asyncHookWrappers.useOnMount)(getFirstInstallTime, -1);\n}\n\nfunction useDeviceName() {\n  return (0, _asyncHookWrappers.useOnMount)(getDeviceName, 'unknown');\n}\n\nfunction useHasSystemFeature(feature) {\n  var asyncGetter = (0, _react.useCallback)(function () {\n    return hasSystemFeature(feature);\n  }, [feature]);\n  return (0, _asyncHookWrappers.useOnMount)(asyncGetter, false);\n}\n\nfunction useIsEmulator() {\n  return (0, _asyncHookWrappers.useOnMount)(isEmulator, false);\n}\n\nfunction useManufacturer() {\n  return (0, _asyncHookWrappers.useOnMount)(getManufacturer, 'unknown');\n}\n\nvar deviceInfoModule = {\n  getAndroidId: getAndroidId,\n  getAndroidIdSync: getAndroidIdSync,\n  getApiLevel: getApiLevel,\n  getApiLevelSync: getApiLevelSync,\n  getApplicationName: getApplicationName,\n  getAvailableLocationProviders: getAvailableLocationProviders,\n  getAvailableLocationProvidersSync: getAvailableLocationProvidersSync,\n  getBaseOs: getBaseOs,\n  getBaseOsSync: getBaseOsSync,\n  getBatteryLevel: getBatteryLevel,\n  getBatteryLevelSync: getBatteryLevelSync,\n  getBootloader: getBootloader,\n  getBootloaderSync: getBootloaderSync,\n  getBrand: getBrand,\n  getBuildId: getBuildId,\n  getBuildIdSync: getBuildIdSync,\n  getBuildNumber: getBuildNumber,\n  getBundleId: getBundleId,\n  getCarrier: getCarrier,\n  getCarrierSync: getCarrierSync,\n  getCodename: getCodename,\n  getCodenameSync: getCodenameSync,\n  getDevice: getDevice,\n  getDeviceId: getDeviceId,\n  getDeviceName: getDeviceName,\n  getDeviceNameSync: getDeviceNameSync,\n  getDeviceSync: getDeviceSync,\n  getDeviceToken: getDeviceToken,\n  getDeviceType: getDeviceType,\n  getDisplay: getDisplay,\n  getDisplaySync: getDisplaySync,\n  getFingerprint: getFingerprint,\n  getFingerprintSync: getFingerprintSync,\n  getFirstInstallTime: getFirstInstallTime,\n  getFirstInstallTimeSync: getFirstInstallTimeSync,\n  getFontScale: getFontScale,\n  getFontScaleSync: getFontScaleSync,\n  getFreeDiskStorage: getFreeDiskStorage,\n  getFreeDiskStorageOld: getFreeDiskStorageOld,\n  getFreeDiskStorageSync: getFreeDiskStorageSync,\n  getFreeDiskStorageOldSync: getFreeDiskStorageOldSync,\n  getHardware: getHardware,\n  getHardwareSync: getHardwareSync,\n  getHost: getHost,\n  getHostSync: getHostSync,\n  getIncremental: getIncremental,\n  getIncrementalSync: getIncrementalSync,\n  getInstallerPackageName: getInstallerPackageName,\n  getInstallerPackageNameSync: getInstallerPackageNameSync,\n  getInstallReferrer: getInstallReferrer,\n  getInstallReferrerSync: getInstallReferrerSync,\n  getInstanceId: getInstanceId,\n  getInstanceIdSync: getInstanceIdSync,\n  getIpAddress: getIpAddress,\n  getIpAddressSync: getIpAddressSync,\n  getLastUpdateTime: getLastUpdateTime,\n  getLastUpdateTimeSync: getLastUpdateTimeSync,\n  getMacAddress: getMacAddress,\n  getMacAddressSync: getMacAddressSync,\n  getManufacturer: getManufacturer,\n  getManufacturerSync: getManufacturerSync,\n  getMaxMemory: getMaxMemory,\n  getMaxMemorySync: getMaxMemorySync,\n  getModel: getModel,\n  getPhoneNumber: getPhoneNumber,\n  getPhoneNumberSync: getPhoneNumberSync,\n  getPowerState: getPowerState,\n  getPowerStateSync: getPowerStateSync,\n  getPreviewSdkInt: getPreviewSdkInt,\n  getPreviewSdkIntSync: getPreviewSdkIntSync,\n  getProduct: getProduct,\n  getProductSync: getProductSync,\n  getReadableVersion: getReadableVersion,\n  getSecurityPatch: getSecurityPatch,\n  getSecurityPatchSync: getSecurityPatchSync,\n  getSerialNumber: getSerialNumber,\n  getSerialNumberSync: getSerialNumberSync,\n  getSystemAvailableFeatures: getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync: getSystemAvailableFeaturesSync,\n  getSystemName: getSystemName,\n  getSystemVersion: getSystemVersion,\n  getTags: getTags,\n  getTagsSync: getTagsSync,\n  getTotalDiskCapacity: getTotalDiskCapacity,\n  getTotalDiskCapacityOld: getTotalDiskCapacityOld,\n  getTotalDiskCapacitySync: getTotalDiskCapacitySync,\n  getTotalDiskCapacityOldSync: getTotalDiskCapacityOldSync,\n  getTotalMemory: getTotalMemory,\n  getTotalMemorySync: getTotalMemorySync,\n  getType: getType,\n  getTypeSync: getTypeSync,\n  getUniqueId: getUniqueId,\n  getUsedMemory: getUsedMemory,\n  getUsedMemorySync: getUsedMemorySync,\n  getUserAgent: getUserAgent,\n  getUserAgentSync: getUserAgentSync,\n  getVersion: getVersion,\n  hasGms: hasGms,\n  hasGmsSync: hasGmsSync,\n  hasHms: hasHms,\n  hasHmsSync: hasHmsSync,\n  hasNotch: hasNotch,\n  hasSystemFeature: hasSystemFeature,\n  hasSystemFeatureSync: hasSystemFeatureSync,\n  isAirplaneMode: isAirplaneMode,\n  isAirplaneModeSync: isAirplaneModeSync,\n  isBatteryCharging: isBatteryCharging,\n  isBatteryChargingSync: isBatteryChargingSync,\n  isCameraPresent: isCameraPresent,\n  isCameraPresentSync: isCameraPresentSync,\n  isEmulator: isEmulator,\n  isEmulatorSync: isEmulatorSync,\n  isHeadphonesConnected: isHeadphonesConnected,\n  isHeadphonesConnectedSync: isHeadphonesConnectedSync,\n  isLandscape: isLandscape,\n  isLandscapeSync: isLandscapeSync,\n  isLocationEnabled: isLocationEnabled,\n  isLocationEnabledSync: isLocationEnabledSync,\n  isPinOrFingerprintSet: isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync: isPinOrFingerprintSetSync,\n  isTablet: isTablet,\n  supported32BitAbis: supported32BitAbis,\n  supported32BitAbisSync: supported32BitAbisSync,\n  supported64BitAbis: supported64BitAbis,\n  supported64BitAbisSync: supported64BitAbisSync,\n  supportedAbis: supportedAbis,\n  supportedAbisSync: supportedAbisSync,\n  syncUniqueId: syncUniqueId,\n  useBatteryLevel: useBatteryLevel,\n  useBatteryLevelIsLow: useBatteryLevelIsLow,\n  useDeviceName: useDeviceName,\n  useFirstInstallTime: useFirstInstallTime,\n  useHasSystemFeature: useHasSystemFeature,\n  useIsEmulator: useIsEmulator,\n  usePowerState: usePowerState,\n  useManufacturer: useManufacturer,\n  useIsHeadphonesConnected: useIsHeadphonesConnected\n};\nvar _default = deviceInfoModule;\nexports.default = _default;","map":{"version":3,"sources":["index.ts"],"names":["getUniqueId","getSupportedPlatformInfoSync","defaultValue","memoKey","supportedPlatforms","getter","RNDeviceInfo","uniqueId","Platform","getSupportedPlatformInfoFunctions","syncGetter","getDeviceId","Promise","getModel","model","getBrand","brand","getSystemName","ios","android","windows","default","getSystemVersion","getBundleId","bundleId","getApplicationName","getBuildNumber","getVersion","appVersion","getUserAgent","getSupportedPlatformInfoAsync","getUserAgentSync","isTablet","notch","_brand","_model","devicesWithNotch","item","getTotalDiskCapacity","getTotalDiskCapacitySync","getFreeDiskStorage","getFreeDiskStorageSync","isLandscapeSync","width","Dimensions","getDeviceType","deviceType","getDeviceTypeSync","deviceInfoEmitter","NativeModules","useState","useEffect","setInitialValue","initialValue","getBatteryLevel","setBatteryLevel","onChange","level","subscription","setBatteryLevelIsLow","getPowerState","setPowerState","state","useOnEvent","useOnMount","asyncGetter","useCallback","hasSystemFeature","deviceInfoModule","getAndroidId","getAndroidIdSync","getApiLevel","getApiLevelSync","getAvailableLocationProviders","getAvailableLocationProvidersSync","getBaseOs","getBaseOsSync","getBatteryLevelSync","getBootloader","getBootloaderSync","getBuildId","getBuildIdSync","getCarrier","getCarrierSync","getCodename","getCodenameSync","getDevice","getDeviceName","getDeviceNameSync","getDeviceSync","getDeviceToken","getDisplay","getDisplaySync","getFingerprint","getFingerprintSync","getFirstInstallTime","getFirstInstallTimeSync","getFontScale","getFontScaleSync","getFreeDiskStorageOld","getFreeDiskStorageOldSync","getHardware","getHardwareSync","getHost","getHostSync","getIncremental","getIncrementalSync","getInstallerPackageName","getInstallerPackageNameSync","getInstallReferrer","getInstallReferrerSync","getInstanceId","getInstanceIdSync","getIpAddress","getIpAddressSync","getLastUpdateTime","getLastUpdateTimeSync","getMacAddress","getMacAddressSync","getManufacturer","getManufacturerSync","getMaxMemory","getMaxMemorySync","getPhoneNumber","getPhoneNumberSync","getPowerStateSync","getPreviewSdkInt","getPreviewSdkIntSync","getProduct","getProductSync","getReadableVersion","getSecurityPatch","getSecurityPatchSync","getSerialNumber","getSerialNumberSync","getSystemAvailableFeatures","getSystemAvailableFeaturesSync","getTags","getTagsSync","getTotalDiskCapacityOld","getTotalDiskCapacityOldSync","getTotalMemory","getTotalMemorySync","getType","getTypeSync","getUsedMemory","getUsedMemorySync","hasGms","hasGmsSync","hasHms","hasHmsSync","hasNotch","hasSystemFeatureSync","isAirplaneMode","isAirplaneModeSync","isBatteryCharging","isBatteryChargingSync","isCameraPresent","isCameraPresentSync","isEmulator","isEmulatorSync","isHeadphonesConnected","isHeadphonesConnectedSync","isLandscape","isLocationEnabled","isLocationEnabledSync","isPinOrFingerprintSet","isPinOrFingerprintSetSync","supported32BitAbis","supported32BitAbisSync","supported64BitAbis","supported64BitAbisSync","supportedAbis","supportedAbisSync","syncUniqueId","useBatteryLevel","useBatteryLevelIsLow","useDeviceName","useFirstInstallTime","useHasSystemFeature","useIsEmulator","usePowerState","useManufacturer","useIsHeadphonesConnected"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useOnEvent, useOnMount } from './internal/asyncHookWrappers';\nimport devicesWithNotch from './internal/devicesWithNotch';\nimport RNDeviceInfo from './internal/nativeInterface';\nimport {\n  getSupportedPlatformInfoFunctions,\n  getSupportedPlatformInfoSync,\n  getSupportedPlatformInfoAsync,\n} from './internal/supported-platform-info';\nimport { DeviceInfoModule } from './internal/privateTypes';\nimport type {\n  AsyncHookResult,\n  DeviceType,\n  LocationProviderInfo,\n  PowerState,\n} from './internal/types';\n\nexport const getUniqueId = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'uniqueId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.uniqueId,\n  });\n\nlet uniqueId: string;\nexport async function syncUniqueId() {\n  if (Platform.OS === 'ios') {\n    uniqueId = await RNDeviceInfo.syncUniqueId();\n  } else {\n    uniqueId = getUniqueId();\n  }\n  return uniqueId;\n}\n\nexport const [getInstanceId, getInstanceIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'instanceId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getInstanceId(),\n  syncGetter: () => RNDeviceInfo.getInstanceIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getSerialNumber, getSerialNumberSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'serialNumber',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSerialNumber(),\n  syncGetter: () => RNDeviceInfo.getSerialNumberSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getAndroidId, getAndroidIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'androidId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getAndroidId(),\n  syncGetter: () => RNDeviceInfo.getAndroidIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getIpAddress, getIpAddressSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getIpAddress(),\n  syncGetter: () => RNDeviceInfo.getIpAddressSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [isCameraPresent, isCameraPresentSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isCameraPresent(),\n  syncGetter: () => RNDeviceInfo.isCameraPresentSync(),\n  defaultValue: false,\n});\n\nexport async function getMacAddress() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddress();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport const getDeviceId = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'deviceId',\n    getter: () => RNDeviceInfo.deviceId,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n  });\n\nexport const [getManufacturer, getManufacturerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'manufacturer',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () =>\n    Platform.OS == 'ios' ? Promise.resolve('Apple') : RNDeviceInfo.getSystemManufacturer(),\n  syncGetter: () => (Platform.OS == 'ios' ? 'Apple' : RNDeviceInfo.getSystemManufacturerSync()),\n  defaultValue: 'unknown',\n});\n\nexport const getModel = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'model',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    getter: () => RNDeviceInfo.model,\n  });\n\nexport const getBrand = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'brand',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.brand,\n  });\n\nexport const getSystemName = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    memoKey: 'systemName',\n    getter: () =>\n      Platform.select({\n        ios: RNDeviceInfo.systemName,\n        android: 'Android',\n        windows: 'Windows',\n        default: 'unknown',\n      }),\n  });\n\nexport const getSystemVersion = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.systemVersion,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'systemVersion',\n  });\n\nexport const [getBuildId, getBuildIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'buildId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getBuildId(),\n  syncGetter: () => RNDeviceInfo.getBuildIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getApiLevel, getApiLevelSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'apiLevel',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getApiLevel(),\n  syncGetter: () => RNDeviceInfo.getApiLevelSync(),\n  defaultValue: -1,\n});\n\nexport const getBundleId = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'bundleId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.bundleId,\n  });\n\nexport const [\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installerPackageName',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getInstallerPackageName(),\n  syncGetter: () => RNDeviceInfo.getInstallerPackageNameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const getApplicationName = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'appName',\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.appName,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n  });\n\nexport const getBuildNumber = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'buildNumber',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.buildNumber,\n    defaultValue: 'unknown',\n  });\n\nexport const getVersion = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'version',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.appVersion,\n  });\n\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\n\nexport const [getDeviceName, getDeviceNameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'deviceName',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getDeviceName(),\n  syncGetter: () => RNDeviceInfo.getDeviceNameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getUsedMemory, getUsedMemorySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getUsedMemory(),\n  syncGetter: () => RNDeviceInfo.getUsedMemorySync(),\n  defaultValue: -1,\n});\n\nexport const getUserAgent = () =>\n  getSupportedPlatformInfoAsync({\n    memoKey: 'userAgent',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'web'],\n    getter: () => RNDeviceInfo.getUserAgent(),\n  });\n\nexport const getUserAgentSync = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'userAgent',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'web'],\n    getter: () => RNDeviceInfo.getUserAgentSync(),\n  });\n\nexport const [getFontScale, getFontScaleSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getFontScale(),\n  syncGetter: () => RNDeviceInfo.getFontScaleSync(),\n  defaultValue: -1,\n});\n\nexport const [getBootloader, getBootloaderSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'bootloader',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getBootloader(),\n  syncGetter: () => RNDeviceInfo.getBootloaderSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getDevice, getDeviceSync] = getSupportedPlatformInfoFunctions({\n  getter: () => RNDeviceInfo.getDevice(),\n  syncGetter: () => RNDeviceInfo.getDeviceSync(),\n  defaultValue: 'unknown',\n  memoKey: 'device',\n  supportedPlatforms: ['android'],\n});\n\nexport const [getDisplay, getDisplaySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'display',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getDisplay(),\n  syncGetter: () => RNDeviceInfo.getDisplaySync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getFingerprint, getFingerprintSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'fingerprint',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getFingerprint(),\n  syncGetter: () => RNDeviceInfo.getFingerprintSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getHardware, getHardwareSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'hardware',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHardware(),\n  syncGetter: () => RNDeviceInfo.getHardwareSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getHost, getHostSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'host',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHost(),\n  syncGetter: () => RNDeviceInfo.getHostSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getProduct, getProductSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'product',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getProduct(),\n  syncGetter: () => RNDeviceInfo.getProductSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getTags, getTagsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'tags',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getTags(),\n  syncGetter: () => RNDeviceInfo.getTagsSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getType, getTypeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'type',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getType(),\n  syncGetter: () => RNDeviceInfo.getTypeSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getBaseOs, getBaseOsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'baseOs',\n  supportedPlatforms: ['android', 'web', 'windows'],\n  getter: () => RNDeviceInfo.getBaseOs(),\n  syncGetter: () => RNDeviceInfo.getBaseOsSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getPreviewSdkInt, getPreviewSdkIntSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'previewSdkInt',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPreviewSdkInt(),\n  syncGetter: () => RNDeviceInfo.getPreviewSdkIntSync(),\n  defaultValue: -1,\n});\n\nexport const [getSecurityPatch, getSecurityPatchSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'securityPatch',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSecurityPatch(),\n  syncGetter: () => RNDeviceInfo.getSecurityPatchSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getCodename, getCodenameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'codeName',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getCodename(),\n  syncGetter: () => RNDeviceInfo.getCodenameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getIncremental, getIncrementalSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'incremental',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getIncremental(),\n  syncGetter: () => RNDeviceInfo.getIncrementalSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [isEmulator, isEmulatorSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'emulator',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.isEmulator(),\n  syncGetter: () => RNDeviceInfo.isEmulatorSync(),\n  defaultValue: false,\n});\n\nexport const isTablet = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: false,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'tablet',\n    getter: () => RNDeviceInfo.isTablet,\n  });\n\nexport const [isPinOrFingerprintSet, isPinOrFingerprintSetSync] = getSupportedPlatformInfoFunctions(\n  {\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.isPinOrFingerprintSet(),\n    syncGetter: () => RNDeviceInfo.isPinOrFingerprintSetSync(),\n    defaultValue: false,\n  }\n);\n\nlet notch: boolean;\nexport function hasNotch() {\n  if (notch === undefined) {\n    let _brand = getBrand();\n    let _model = getModel();\n    notch =\n      devicesWithNotch.findIndex(\n        (item) =>\n          item.brand.toLowerCase() === _brand.toLowerCase() &&\n          item.model.toLowerCase() === _model.toLowerCase()\n      ) !== -1;\n  }\n  return notch;\n}\n\nexport const [hasGms, hasGmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasGms(),\n  syncGetter: () => RNDeviceInfo.hasGmsSync(),\n  defaultValue: false,\n});\n\nexport const [hasHms, hasHmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasHms(),\n  syncGetter: () => RNDeviceInfo.hasHmsSync(),\n  defaultValue: false,\n});\n\nexport const [getFirstInstallTime, getFirstInstallTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'firstInstallTime',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getFirstInstallTime(),\n  syncGetter: () => RNDeviceInfo.getFirstInstallTimeSync(),\n  defaultValue: -1,\n});\n\nexport const [getInstallReferrer, getInstallReferrerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installReferrer',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getInstallReferrer(),\n  syncGetter: () => RNDeviceInfo.getInstallReferrerSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getLastUpdateTime, getLastUpdateTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'lastUpdateTime',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getLastUpdateTime(),\n  syncGetter: () => RNDeviceInfo.getLastUpdateTimeSync(),\n  defaultValue: -1,\n});\n\nexport const [getPhoneNumber, getPhoneNumberSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPhoneNumber(),\n  syncGetter: () => RNDeviceInfo.getPhoneNumberSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getCarrier, getCarrierSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getCarrier(),\n  syncGetter: () => RNDeviceInfo.getCarrierSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getTotalMemory, getTotalMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'totalMemory',\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalMemory(),\n  syncGetter: () => RNDeviceInfo.getTotalMemorySync(),\n  defaultValue: -1,\n});\n\nexport const [getMaxMemory, getMaxMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'maxMemory',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getMaxMemory(),\n  syncGetter: () => RNDeviceInfo.getMaxMemorySync(),\n  defaultValue: -1,\n});\n\nexport const [getTotalDiskCapacity, getTotalDiskCapacitySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalDiskCapacity(),\n  syncGetter: () => RNDeviceInfo.getTotalDiskCapacitySync(),\n  defaultValue: -1,\n});\n\nexport async function getTotalDiskCapacityOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOld();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacity();\n  }\n\n  return -1;\n}\n\nexport function getTotalDiskCapacityOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOldSync();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\n\nexport const [getFreeDiskStorage, getFreeDiskStorageSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getFreeDiskStorage(),\n  syncGetter: () => RNDeviceInfo.getFreeDiskStorageSync(),\n  defaultValue: -1,\n});\n\nexport async function getFreeDiskStorageOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOld();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorage();\n  }\n\n  return -1;\n}\n\nexport function getFreeDiskStorageOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOldSync();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\n\nexport const [getBatteryLevel, getBatteryLevelSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getBatteryLevel(),\n  syncGetter: () => RNDeviceInfo.getBatteryLevelSync(),\n  defaultValue: -1,\n});\n\nexport const [getPowerState, getPowerStateSync] = getSupportedPlatformInfoFunctions<\n  PowerState | {}\n>({\n  supportedPlatforms: ['ios', 'android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getPowerState(),\n  syncGetter: () => RNDeviceInfo.getPowerStateSync(),\n  defaultValue: {},\n});\n\nexport const [isBatteryCharging, isBatteryChargingSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isBatteryCharging(),\n  syncGetter: () => RNDeviceInfo.isBatteryChargingSync(),\n  defaultValue: false,\n});\n\nexport async function isLandscape() {\n  return Promise.resolve(isLandscapeSync());\n}\n\nexport function isLandscapeSync() {\n  const { height, width } = Dimensions.get('window');\n  return width >= height;\n}\n\nexport const [isAirplaneMode, isAirplaneModeSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'web'],\n  getter: () => RNDeviceInfo.isAirplaneMode(),\n  syncGetter: () => RNDeviceInfo.isAirplaneModeSync(),\n  defaultValue: false,\n});\n\nexport const getDeviceType = () => {\n  if (Platform.OS === 'windows') return 'Desktop';\n\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType,\n  });\n};\n\nexport const getDeviceTypeSync = () => {\n  if (Platform.OS === 'windows') return 'Desktop';\n\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType,\n  });\n};\n\nexport const [supportedAbis, supportedAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supportedAbis',\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getSupportedAbis(),\n  syncGetter: () => RNDeviceInfo.getSupportedAbisSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [supported32BitAbis, supported32BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported32BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported32BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported32BitAbisSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [supported64BitAbis, supported64BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported64BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported64BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported64BitAbisSync(),\n  defaultValue: [],\n});\n\nexport async function hasSystemFeature(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeature(feature);\n  }\n  return false;\n}\n\nexport function hasSystemFeatureSync(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n  return false;\n}\n\nexport const [\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSystemAvailableFeatures(),\n  syncGetter: () => RNDeviceInfo.getSystemAvailableFeaturesSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [isLocationEnabled, isLocationEnabledSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: () => RNDeviceInfo.isLocationEnabled(),\n  syncGetter: () => RNDeviceInfo.isLocationEnabledSync(),\n  defaultValue: false,\n});\n\nexport const [isHeadphonesConnected, isHeadphonesConnectedSync] = getSupportedPlatformInfoFunctions(\n  {\n    supportedPlatforms: ['android', 'ios'],\n    getter: () => RNDeviceInfo.isHeadphonesConnected(),\n    syncGetter: () => RNDeviceInfo.isHeadphonesConnectedSync(),\n    defaultValue: false,\n  }\n);\n\nexport const [\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getAvailableLocationProviders(),\n  syncGetter: () => RNDeviceInfo.getAvailableLocationProvidersSync(),\n  defaultValue: {},\n});\n\nexport async function getDeviceToken() {\n  if (Platform.OS === 'ios') {\n    return RNDeviceInfo.getDeviceToken();\n  }\n  return 'unknown';\n}\n\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel(): number | null {\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevel(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_batteryLevelDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevel;\n}\n\nexport function useBatteryLevelIsLow(): number | null {\n  const [batteryLevelIsLow, setBatteryLevelIsLow] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevelIsLow(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevelIsLow(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevelIsLow;\n}\n\nexport function usePowerState(): PowerState | {} {\n  const [powerState, setPowerState] = useState<PowerState | {}>({});\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: PowerState | {} = await getPowerState();\n      setPowerState(initialValue);\n    };\n\n    const onChange = (state: PowerState) => {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_powerStateDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return powerState;\n}\n\nexport function useIsHeadphonesConnected(): AsyncHookResult<boolean> {\n  return useOnEvent('RNDeviceInfo_headphoneConnectionDidChange', isHeadphonesConnected, false);\n}\n\nexport function useFirstInstallTime(): AsyncHookResult<number> {\n  return useOnMount(getFirstInstallTime, -1);\n}\n\nexport function useDeviceName(): AsyncHookResult<string> {\n  return useOnMount(getDeviceName, 'unknown');\n}\n\nexport function useHasSystemFeature(feature: string): AsyncHookResult<boolean> {\n  const asyncGetter = useCallback(() => hasSystemFeature(feature), [feature]);\n  return useOnMount(asyncGetter, false);\n}\n\nexport function useIsEmulator(): AsyncHookResult<boolean> {\n  return useOnMount(isEmulator, false);\n}\n\nexport function useManufacturer(): AsyncHookResult<string> {\n  return useOnMount(getManufacturer, 'unknown');\n}\n\nexport type { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState };\n\nconst deviceInfoModule: DeviceInfoModule = {\n  getAndroidId,\n  getAndroidIdSync,\n  getApiLevel,\n  getApiLevelSync,\n  getApplicationName,\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n  getBaseOs,\n  getBaseOsSync,\n  getBatteryLevel,\n  getBatteryLevelSync,\n  getBootloader,\n  getBootloaderSync,\n  getBrand,\n  getBuildId,\n  getBuildIdSync,\n  getBuildNumber,\n  getBundleId,\n  getCarrier,\n  getCarrierSync,\n  getCodename,\n  getCodenameSync,\n  getDevice,\n  getDeviceId,\n  getDeviceName,\n  getDeviceNameSync,\n  getDeviceSync,\n  getDeviceToken,\n  getDeviceType,\n  getDisplay,\n  getDisplaySync,\n  getFingerprint,\n  getFingerprintSync,\n  getFirstInstallTime,\n  getFirstInstallTimeSync,\n  getFontScale,\n  getFontScaleSync,\n  getFreeDiskStorage,\n  getFreeDiskStorageOld,\n  getFreeDiskStorageSync,\n  getFreeDiskStorageOldSync,\n  getHardware,\n  getHardwareSync,\n  getHost,\n  getHostSync,\n  getIncremental,\n  getIncrementalSync,\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n  getInstallReferrer,\n  getInstallReferrerSync,\n  getInstanceId,\n  getInstanceIdSync,\n  getIpAddress,\n  getIpAddressSync,\n  getLastUpdateTime,\n  getLastUpdateTimeSync,\n  getMacAddress,\n  getMacAddressSync,\n  getManufacturer,\n  getManufacturerSync,\n  getMaxMemory,\n  getMaxMemorySync,\n  getModel,\n  getPhoneNumber,\n  getPhoneNumberSync,\n  getPowerState,\n  getPowerStateSync,\n  getPreviewSdkInt,\n  getPreviewSdkIntSync,\n  getProduct,\n  getProductSync,\n  getReadableVersion,\n  getSecurityPatch,\n  getSecurityPatchSync,\n  getSerialNumber,\n  getSerialNumberSync,\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n  getSystemName,\n  getSystemVersion,\n  getTags,\n  getTagsSync,\n  getTotalDiskCapacity,\n  getTotalDiskCapacityOld,\n  getTotalDiskCapacitySync,\n  getTotalDiskCapacityOldSync,\n  getTotalMemory,\n  getTotalMemorySync,\n  getType,\n  getTypeSync,\n  getUniqueId,\n  getUsedMemory,\n  getUsedMemorySync,\n  getUserAgent,\n  getUserAgentSync,\n  getVersion,\n  hasGms,\n  hasGmsSync,\n  hasHms,\n  hasHmsSync,\n  hasNotch,\n  hasSystemFeature,\n  hasSystemFeatureSync,\n  isAirplaneMode,\n  isAirplaneModeSync,\n  isBatteryCharging,\n  isBatteryChargingSync,\n  isCameraPresent,\n  isCameraPresentSync,\n  isEmulator,\n  isEmulatorSync,\n  isHeadphonesConnected,\n  isHeadphonesConnectedSync,\n  isLandscape,\n  isLandscapeSync,\n  isLocationEnabled,\n  isLocationEnabledSync,\n  isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync,\n  isTablet,\n  supported32BitAbis,\n  supported32BitAbisSync,\n  supported64BitAbis,\n  supported64BitAbisSync,\n  supportedAbis,\n  supportedAbisSync,\n  syncUniqueId,\n  useBatteryLevel,\n  useBatteryLevelIsLow,\n  useDeviceName,\n  useFirstInstallTime,\n  useHasSystemFeature,\n  useIsEmulator,\n  usePowerState,\n  useManufacturer,\n  useIsHeadphonesConnected,\n};\n\nexport default deviceInfoModule;\n"]},"metadata":{},"sourceType":"script"}